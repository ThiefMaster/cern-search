apiVersion: v1
kind: Template
metadata:
  name: cern-search-rest
  annotations:
    descriptino: "CERN Search RESTful API and necessary services OpenShift Template"
labels:
  template: "cern-search-rest"

objects:

##############################
##### DEPLOYMENT CONFIGS #####
##############################

### CERN Search RESTful API
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    labels:
      app: cern-search-api
    name: cern-search-api
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: cern-search-api
      deploymentconfig: cern-search-api
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: cern-search-api
          deploymentconfig: cern-search-api
      spec:
        containers:
        - command:
            - /bin/sh
            - '-c'
            - /code/scripts/manage-user.sh && invenio run
          image: gitlab-registry.cern.ch/ppanero/cern_search_rest:latest
          imagePullPolicy: Always
          name: cern-search-api
          ports:
          - containerPort: 5000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - init-cern-search
        - cern-search-api
        from:
          kind: ImageStreamTag
          name: cern-search-api:latest
          namespace: test-cern-search
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

### Redis Server
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: redis
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: redis
      spec:
        containers:
        - name: redis
          image: redis
          ports:
          - containerPort: 5432
            name: tcp
          volumeMounts:
            - name: data
              mountPath: /data
        volumes:
          - name: data
            emptyDir: {}


### Elasticsearch
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: elasticsearch
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: elasticsearch
      spec:
        containers:
        - name: elasticsearch
          image: 'elasticsearch:latest'
          ports:
          - containerPort: 9200
            protocol: TCP
          - containerPort: 9300
            protocol: TCP
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: elasticsearch-data
        securityContext: {}
        volumes:
          - name: elasticsearch-data
            emptyDir: {}


### RabbitMQ

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: rabbitmq
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          app: rabbitmq
      spec:
        containers:
        - name: rabbitmq
          image: rabbitmq
          ports:
          - containerPort: 4369
          - containerPort: 5672


##############################
########## SERVICES ##########
##############################
# Service for the RESTful API
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: cern-search-api
    name: restapi
  spec:
    ports:
    - name: 5000-tcp
      port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      app: cern-search-api
      deploymentconfig: restapi
    sessionAffinity: None
    type: ClusterIP
# Service for the Redis server
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: cern-search-api
    name: redis
  spec:
    ports:
    - name: 6379-tcp
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app: cern-search-api
      deploymentconfig: redis
    sessionAffinity: None
    type: ClusterIP
# Service for the Elasticsearch server
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: cern-search-api
    name: elasticsearch
  spec:
    ports:
    - name: 9200-tcp
      port: 9200
      protocol: TCP
      targetPort: 9200
    - name: 9300-tcp
      port: 9300
      protocol: TCP
      targetPort: 9300
    selector:
      app: cern-search-api
      deploymentconfig: elasticsearch
    sessionAffinity: None
    type: ClusterIP
# Service for the RabbitMQ server
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: cern-search-api
    name: rabbitmq
  spec:
    ports:
    - name: 4369-tcp
      port: 4369
      protocol: TCP
      targetPort: 4369
    - name: 5672-tcp
      port: 5672
      protocol: TCP
      targetPort: 5672
    selector:
      app: cern-search-api
      deploymentconfig: rabbitmq
    sessionAffinity: None
    type: ClusterIP

##############################
########### ROUTES ###########
##############################
- kind: Route
  apiVersion: v1
  metadata:
    labels:
      app: cern-search-api
    name: restapi
  spec:
    port:
      targetPort: 5000-tcp
    to:
      kind: Service
      name: restapi
      weight: 100
    tls:
      termination: "edge"
      insecureEdgeTerminationPolicy: Redirect

# TODO: Delete when automated in OpenShift/GitLab CI
##############################
######## IMAGE STREAM ########
##############################
- kind: ImageStream
  apiVersion: v1
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      openshift.io/image.dockerRepositoryCheck: 2018-03-07T09:29:26Z
    creationTimestamp: null
    generation: 3
    labels:
      app: cern-search-api
    name: cern-search-api
  spec:
    dockerImageRepository: gitlab-registry.cern.ch/ppanero/cern_search_rest
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: gitlab-registry.cern.ch/ppanero/cern_search_rest:latest
      generation: 3
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
  status:
    dockerImageRepository: ""

##############################
######### CONFIG MAP #########
##############################

- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: env-configmap
  data:
    # Invenio
    INVENIO_INSTANCE_PATH_KEY: ${APP_INSTANCE_PATH}
    # Redis
    INVENIO_CACHE_REDIS_HOST: 'redis'
    INVENIO_CACHE_REDIS_URL: 'redis://redis:6379/0'
    # Celery
    INVENIO_CELERY_RESULT_BACKEND: 'redis://cache:6379/2'
    INVENIO_CELERY_BROKER_URL: 'amqp://invenio:invenio@rabbitmq:5672/' # TODO: Take care of secrets, here just for testing
    # Elasticsearch
    INVENIO_SEARCH_ELASTIC_HOSTS: 'elasticsearch'
    INVENIO_COLLECT_STORAGE: flask_collect.storage.file


parameters:
  - name: APP_INSTANCE_PATH
    description: "Invenio instance path for CERN Search application."
    required: true